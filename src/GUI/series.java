/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Sereis.seriesData;
import api.httpAPI;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JCheckBox;

/**
 *
 * @author asksoft
 */
public class series extends javax.swing.JFrame {

    private JButton button;
    private JCheckBox jCheckBox;

    /**
     * Creates new form series
     */
    public series() {
        initComponents();
        this.loadSeries();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 636, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 400));

        jButton1.setText("X");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 0, 30, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            setVisible(false);
            if (Dashboard.series.size() <= 0) {
                Dashboard.setMainSeries("1000-1900");
            }
            if (Dashboard.multiSeries.size() <= 0) {
                Dashboard.multiSeries.add("1000-1900");
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(series.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new series().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    public final void loadSeries() {
        try {
            String fileData = httpAPI._jsonRequest("?r=loadSeries", "");
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            seriesData series = gson.fromJson(fileData, seriesData.class);
            if (Dashboard.multi.isSelected()) {
                //Dashboard.multiSeries = new ArrayList<>();
                ArrayList<Map> test = series.getProperties();
                Iterator<Map> itr = test.iterator();
                jPanel1.setLayout(new FlowLayout());
                while (itr.hasNext()) {
                    Map<String, String> temp = itr.next();
                    System.out.println(temp.get("series"));
                    jCheckBox = new JCheckBox(temp.get("series"));
                    if (Dashboard.series.get(temp.get("series")) != null) {
                        jCheckBox.setSelected(true);
                    }
                    jCheckBox.addItemListener(new ItemListener() {
                        @Override
                        public void itemStateChanged(ItemEvent e) {
                            if (e.getStateChange() == ItemEvent.SELECTED) {//checkbox has been selected
                                Dashboard.multiSeries.add(temp.get("series"));
                                int sr = Integer.parseInt(temp.get("id")) - 1;
                                Dashboard.SelectedSingleSeries = sr + "";
                                Dashboard.seriesLable.setText("1000-1900");
                                Dashboard.selectDefaultSeriesMulti(0);
                                Dashboard.setMainSeries(temp.get("series"));
                            } else {//checkbox has been deselected
                                Dashboard.multiSeries.remove(temp.get("series"));
                                Dashboard.removeMainSeries(temp.get("series"));
                            }
                        }

                    });
                    jPanel1.add(jCheckBox);

                }
//          
            } else {
                Dashboard.series.clear();
                ArrayList<Map> test = series.getProperties();
                Iterator<Map> itr = test.iterator();
                //this.setLayout(new GridLayout(3, 5));
                jPanel1.setLayout(new FlowLayout());
                while (itr.hasNext()) {
                    Map<String, String> temp = itr.next();
                    System.out.println(temp.get("series"));
                    button = new JButton(temp.get("series"));
                    button.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            int sr = Integer.parseInt(temp.get("id")) - 1;
                            Dashboard.SelectedSingleSeries = sr + "";
                            Dashboard.seriesLable.setText(temp.get("series"));
                            Dashboard.selectDefaultSeries(sr);
                            this.hideForm();
                        }

                        private void hideForm() {
                            setVisible(false);
                        }

                    });
                    //button.setBounds(i, 30, 100, 30);
                    jPanel1.add(button);

                }
            }

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }
}
