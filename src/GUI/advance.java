/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import AdvanceDraw.AdvanceData;
import api.httpAPI;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;

/**
 *
 * @author asksoft
 */
public class advance extends javax.swing.JFrame {

    private static JCheckBox jCheckBox;
    public static Map<String, JCheckBox> adCheck = new HashMap<>();

    /**
     * Creates new form advance
     */
    public advance() {
        initComponents();
        loadAdvance();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tf = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        num = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("X");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 269, Short.MAX_VALUE)
        );

        jLabel1.setText("How many draw select");

        tf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfKeyReleased(evt);
            }
        });

        jLabel2.setText("Max Entry=");

        num.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tf, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(num)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jButton1))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(tf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(num))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        if (Dashboard.advanceDrawArray.size() <= 0) {
            Dashboard.advance.setText("false");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfKeyReleased
        // TODO add your handling code here:
        try {
            for (int i = 0; i < adCheck.size(); i++) {
                JCheckBox js = adCheck.get(i + "");
                js.setSelected(false);
            }
            String value = tf.getText();
            int l = value.length();
            if (evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9') {
                if (Integer.parseInt(value) <= Integer.parseInt(num.getText())) {
                    for (int i = 0; i < Integer.parseInt(value); i++) {
                        JCheckBox js = adCheck.get(i + "");
                        js.setSelected(true);
                    }
                } else {
                    //JOptionPane.showMessageDialog(this, "Enter Number is Greater than max entry", "Error Message Box", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                //JOptionPane.showMessageDialog(this, "Invalid Number", "Error Message Box", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error Message Box", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_tfKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(advance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(advance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(advance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(advance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new advance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public static javax.swing.JPanel jPanel1;
    public static javax.swing.JLabel num;
    public static javax.swing.JTextField tf;
    // End of variables declaration//GEN-END:variables
    public static void loadAdvance() {
        try {
            String fileData = httpAPI._jsonRequest("?r=advanceDraw", "");
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            AdvanceData series = gson.fromJson(fileData, AdvanceData.class);
            ArrayList<Map> test = series.getProperties();
            Iterator<Map> itr = test.iterator();

            //jPanel1.setLayout(new FlowLayout());
            //Dashboard.advanceDrawArray = new ArrayList<>();
            int i = 0;
            int x = 10;
            int y = 10;
            int a = 120;
            int b = 30;
            int ks = 0;
            while (itr.hasNext()) {
                Map<String, String> temp = itr.next();

                jCheckBox = new JCheckBox(temp.get("id") + "[" + temp.get("etime") + "]");
                adCheck.put(ks + "", jCheckBox);
                jCheckBox.setBounds(x, y, a, b);

                if (i == 2) {
                    y = 20 + y;
                    x = 10;
                    i = -1;
                } else {
                    x = 130 + x;
                }
                i++;

                ks++;
                if (Dashboard.advanceDraw.get(temp.get("id")) != null) {
                    jCheckBox.setSelected(true);
                }
                jCheckBox.addItemListener(new ItemListener() {
                    @Override
                    public void itemStateChanged(ItemEvent e) {
                        if (e.getStateChange() == ItemEvent.SELECTED) {//checkbox has been selected
                            Map<String, String> advanceDraw = new HashMap<>();
                            advanceDraw.put("gametimeid", temp.get("id"));
                            advanceDraw.put("gametime", temp.get("stime"));
                            advanceDraw.put("gameendtime", temp.get("etime"));
                            Dashboard.advanceDrawArray.add(advanceDraw);
                            Dashboard.advanceDraw.put(temp.get("id"), advanceDraw);
                            Dashboard.advance.setText("true");
                            System.out.println(Dashboard.advanceDrawArray);

                        } else {//checkbox has been deselected
                            Map<String, String> advanceDraw = new HashMap<>();
                            advanceDraw.put("gametimeid", temp.get("id"));
                            advanceDraw.put("gametime", temp.get("stime"));
                            advanceDraw.put("gameendtime", temp.get("etime"));
                            Dashboard.advanceDrawArray.remove(advanceDraw);
                            Dashboard.advanceDraw.remove(temp.get("id"));
                            System.out.println(Dashboard.advanceDrawArray);
                            // Dashboard.removeMainSeries(temp.get("series"));
                        }
                    }

                });
                jPanel1.add(jCheckBox);
            }
            num.setText(ks + "");
        } catch (Exception ex) {
            System.out.println("Advance Error " + ex.getMessage());
        }
    }

//    private void loadOld() {
//        try {
//            for (int i = 0; i < Dashboard.advanceDrawArray.size(); i++) {
//                Map<String, String> advanceDraw = Dashboard.advanceDrawArray.get(i);
//                String lab = advanceDraw.get("id") + "[" + advanceDraw.get("etime") + "]";
//                System.out.println(lab);
//                //JCheckBox jb=Dashboard.adCheck.get(lab);
//                //jb.setSelected(true);
//
//            }
//        } catch (Exception ex) {
//            System.out.println("loadOld Error " + ex.getMessage());
//        }
//    }
}
